{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAiBA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EACEM,EAAAZ,GAASa,OAAOC,QACd,uBAAwCC,OAAfZ,EAAS,QAAiBY,OAAXX,EAAW,QAIvDG,EACEK,EAAAZ,GAASa,OAAOG,QACd,sBAAqCD,OAAfZ,EAAS,QAAiBY,OAAXX,EAAW,O,GAIrDA,E,IAjCMa,SAASC,cAAc,SAqC/BC,iBAAiB,UAnCH,SAAAC,GACjBA,EAAEC,iBAMF,IAJA,IAAIjB,EAAakB,OAAOF,EAAEG,cAAcC,MAAMC,OACxCC,EAAYJ,OAAOF,EAAEG,cAAcI,KAAKF,OACxCG,EAAcN,OAAOF,EAAEG,cAAcM,OAAOJ,OAEzCtB,EAAW,EAAGA,GAAYyB,EAAazB,GAAY,EAC1DD,EAAcC,EAAUC,GAAY0B,OAAOC,QAC3C3B,GAAcsB,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nconst submitForm = e => {\n  e.preventDefault();\n\n  let delayInput = Number(e.currentTarget.delay.value);\n  const stepInput = Number(e.currentTarget.step.value);\n  const amountInput = Number(e.currentTarget.amount.value);\n\n  for (let position = 1; position <= amountInput; position += 1) {\n    createPromise(position, delayInput).then().catch();\n    delayInput += stepInput;\n  }\n};\n\nfunction createPromise(position, delayInput) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve(\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delayInput}ms`\n          )\n        );\n      } else {\n        reject(\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delayInput}ms`\n          )\n        );\n      }\n    }, delayInput);\n  });\n}\n\nform.addEventListener('submit', submitForm);\n\n//   setTimeout(() => {\n//     createPromise(counter, delayInput)\n//       .then(value => {\n//         Notiflix.Notify.success(value);\n//       })\n//       .catch(error => {\n//         Notiflix.Notify.failure(error);\n//       });\n\n//     intervalId = setInterval(() => {\n//       counter++;\n\n//       if (counter === +amountInput) {\n//         clearInterval(intervalId);\n//       }\n//       createPromise(counter, +delayInput + stepInput * counter)\n//         .then(value => {\n//           Notiflix.Notify.success(value);\n//         })\n//         .catch(error => {\n//           Notiflix.Notify.success(error);\n//         });\n//     }, stepInput);\n//   }, delayInput);\n// };\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delayInput","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","$parcel$interopDefault","Notify","success","concat","failure","document","querySelector","addEventListener","e","preventDefault","Number","currentTarget","delay","value","stepInput","step","amountInput","amount","then","catch"],"version":3,"file":"03-promises.164a217f.js.map"}